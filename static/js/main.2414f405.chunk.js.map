{"version":3,"sources":["actions.js","api/api.js","constants.js","components/Card.js","components/Cardlist.js","components/SearchBox.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","reducers.js","index.js"],"names":["requestUsers","dispatch","link","type","fetch","method","headers","process","REACT_APP_FACES_KEY","then","response","json","arr","map","user","i","id","data","payload","catch","error","Card","name","email","position","photo","className","alt","src","CardList","users","key","SearchBox","searchField","searchChange","placeholder","onChange","ErrorBoundry","props","state","hasError","info","this","setState","children","Component","App","onRequestUsers","onSearchChange","isPending","filteredUsers","filter","toLowerCase","includes","connect","searchUsers","event","target","value","Boolean","window","location","hostname","match","initialStateSearch","initialStateUsers","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.2414f405.chunk.js","sourcesContent":["import { apiCall } from './api/api'\nimport {\n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_USERS_PENDING,\n\tREQUEST_USERS_SUCCESS,\n\tREQUEST_USERS_FAILED\n} from './constants'\n\nexport const setSearchField = (text) => ({\n\ttype: CHANGE_SEARCH_FIELD,\n\tpayload: text\n})\n\nexport const requestUsers = () => (dispatch) => {\n  dispatch({ type: REQUEST_USERS_PENDING })\n  apiCall('https://uifaces.co/api?limit=30')\n  //apiCall('https://jsonplaceholder.typicode.com/users')\n    .then(data => dispatch({ type: REQUEST_USERS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_USERS_FAILED, payload: error }))\n}\n","export const apiCall = (link) => \n\tfetch(link, {\n\t\tmethod: 'GET',\n \t\theaders: {\n  \t\t\t'X-API-KEY': process.env.REACT_APP_FACES_KEY,\n \t\t\t'Accept': 'application/json',\n  \t\t\t'Cache-Control': 'no-cache'\n \t\t}\n \t})\n \t.then(response => response.json())\n \t.then(arr => arr.map((user, i) => { \n \t\tuser.id = i+1\n \t\treturn user;\n \t\t}\n \t))","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_USERS_PENDING = 'REQUEST_USERS_PENDING';\nexport const REQUEST_USERS_SUCCESS = 'REQUEST_USERS_SUCCESS';\nexport const REQUEST_USERS_FAILED = 'REQUEST_USERS_FAILED';\n\t","import React from 'react';\n\nconst Card = ({ name, email, position, photo, id }) => {\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n      <img className='br4 h4 dib' alt='profile' src={photo} />\n      <div>\n        <h2>{name}</h2>\n        <p>{position}</p>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ users }) => {\n  return (\n    <div className=\"pt7\">   \n      {users.map((user, i) => {\n        return (\n          <Card \n            key={users[i].id} \n            id={users[i].id} \n            name={users[i].name} \n            email={users[i].email} \n            position={users[i].position} \n            photo={users[i].photo} \n          />)\n      })}\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchField, searchChange}) => {\n\treturn (\n\t\t<div className=\"pa2\">\n\t\t\t<input \n\t\t\t\tclassName=\"pa3 ba b--green bg-lightest-blue\"\n\t\t\t\ttype=\"search\" \n\t\t\t\tplaceholder=\"search here\" \n\t\t\t\tonChange={searchChange}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default SearchBox;","import React, {Component} from 'react';\n\nclass ErrorBoundry extends Component {\n\tconstructor(props) {\n\t\tsuper(props); \n\t\tthis.state = {\n\t\t\thasError: false\n\t\t}\n\t}\n\n\tcomponentDidCatch(error, info) {\n\t\tthis.setState({\thasError: true})\n\t}\n\n\trender () {\n\t\treturn (this.state.hasError ? <h1> Oooops. Sorry about that!</h1> : this.props.children);\n\t}\n}\n\nexport default ErrorBoundry;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setSearchField, requestUsers } from '../actions';\nimport CardList from '../components/Cardlist'; \nimport SearchBox from '../components/SearchBox';  \nimport ErrorBoundry from '../components/ErrorBoundry';\n\nimport './App.css';\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchUsers.searchField,\n    users: state.requestUsers.users,\n    isPending: state.requestUsers.isPending,\n    error: state.requestUsers.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestUsers: () => dispatch(requestUsers())\n  }\n}\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestUsers();\n  }\n\n  render() {\n    const { users, searchField, onSearchChange, isPending } = this.props;\n    const filteredUsers  = users.filter(user => {\n      return user.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    return isPending  ?\n      <h1 className=\"tc\">Loading</h1> : \n      (\n      <div className=\"tc\">\n       <header className=\"bg-white-20 fixed w-100 ph3 pv3 pv4-ns ph4-m ph5-l\">\n        <nav className=\"f6 fw6\">\n          <h1 className=\"f1\">Find your colleague!</h1>\n          < SearchBox searchChange={onSearchChange}/>\n        </nav>\n      </header>    \n          <ErrorBoundry>\n            < CardList users={filteredUsers} />\n          </ErrorBoundry>\n      </div>\n      );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_USERS_PENDING,\n\tREQUEST_USERS_SUCCESS,\n\tREQUEST_USERS_FAILED\n} from './constants'\n\n\nconst initialStateSearch = {\n\tsearchField: ''\n}\n\nconst initialStateUsers = {\n\tisPending: false,\n\tusers: [],\n\terror: ''\n}\n\nexport const searchUsers = (state = initialStateSearch, action={}) => {\n\tswitch(action.type){\n\t\tcase CHANGE_SEARCH_FIELD: \n\t\t\treturn Object.assign({}, state, {searchField: action.payload});\n\t\tdefault: \n\t\t\treturn state;\n\t}\n}\n\nexport const requestUsers = (state=initialStateUsers, action={}) => {\n\tswitch(action.type){\n\t\tcase REQUEST_USERS_PENDING:\n\t\t\treturn Object.assign({}, state, { isPending: true})\n\t\tcase REQUEST_USERS_SUCCESS:\n\t\t\treturn Object.assign({}, state, { users: action.payload, isPending: false })\n\t\tcase REQUEST_USERS_FAILED:\n\t\t\treturn Object.assign({}, state, { error: action.payload, isPending: false})\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchUsers, requestUsers } from './reducers';\nimport 'tachyons';\n\n\nconst logger = createLogger()\nconst rootReducer = combineReducers({searchUsers, requestUsers})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    \t<App />\n\t</Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
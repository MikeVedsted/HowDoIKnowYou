{"version":3,"sources":["actions.js","api/api.js","constants.js","components/Card.js","components/Cardlist.js","components/SearchBox.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","reducers.js","index.js"],"names":["requestUsers","dispatch","link","type","fetch","method","headers","process","REACT_APP_FACES_KEY","then","response","json","arr","map","user","i","id","data","payload","catch","error","Card","name","email","position","photo","className","alt","src","CardList","users","key","SearchBox","searchField","searchChange","placeholder","onChange","ErrorBoundry","props","state","hasError","info","this","setState","children","Component","App","onRequestUsers","onSearchChange","isPending","filteredUsers","filter","toLowerCase","includes","connect","searchUsers","event","target","value","Boolean","window","location","hostname","match","initialStateSearch","initialStateUsers","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.f56aafb1.chunk.js","sourcesContent":["import { apiCall } from './api/api'\r\nimport {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_USERS_PENDING,\r\n\tREQUEST_USERS_SUCCESS,\r\n\tREQUEST_USERS_FAILED\r\n} from './constants'\r\n\r\nexport const setSearchField = (text) => ({\r\n\ttype: CHANGE_SEARCH_FIELD,\r\n\tpayload: text\r\n})\r\n\r\nexport const requestUsers = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_USERS_PENDING })\r\n  apiCall('https://uifaces.co/api?limit=30')\r\n  //apiCall('https://jsonplaceholder.typicode.com/users')\r\n    .then(data => dispatch({ type: REQUEST_USERS_SUCCESS, payload: data }))\r\n    .catch(error => dispatch({ type: REQUEST_USERS_FAILED, payload: error }))\r\n}\r\n","export const apiCall = (link) => \r\n\tfetch(link, {\r\n\t\tmethod: 'GET',\r\n \t\theaders: {\r\n  \t\t\t'X-API-KEY': process.env.REACT_APP_FACES_KEY,\r\n \t\t\t'Accept': 'application/json',\r\n  \t\t\t'Cache-Control': 'no-cache'\r\n \t\t}\r\n \t})\r\n \t.then(response => response.json())\r\n \t.then(arr => arr.map((user, i) => { \r\n \t\tuser.id = i+1\r\n \t\treturn user;\r\n \t\t}\r\n \t))","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_USERS_PENDING = 'REQUEST_USERS_PENDING';\r\nexport const REQUEST_USERS_SUCCESS = 'REQUEST_USERS_SUCCESS';\r\nexport const REQUEST_USERS_FAILED = 'REQUEST_USERS_FAILED';\r\n\t","import React from 'react';\r\n\r\nconst Card = ({ name, email, position, photo, id }) => {\r\n  return (\r\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\r\n      <img className='br4 h4 dib' alt='profile' src={photo} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{position}</p>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ users }) => {\r\n  return (\r\n    <div className=\"pt7\">   \r\n      {users.map((user, i) => {\r\n        return (\r\n          <Card \r\n            key={users[i].id} \r\n            id={users[i].id} \r\n            name={users[i].name} \r\n            email={users[i].email} \r\n            position={users[i].position} \r\n            photo={users[i].photo} \r\n          />)\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchField, searchChange}) => {\r\n\treturn (\r\n\t\t<div className=\"pa2\">\r\n\t\t\t<input \r\n\t\t\t\tclassName=\"pa3 ba b--green bg-lightest-blue\"\r\n\t\t\t\ttype=\"search\" \r\n\t\t\t\tplaceholder=\"search here\" \r\n\t\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props); \r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info) {\r\n\t\tthis.setState({\thasError: true})\r\n\t}\r\n\r\n\trender () {\r\n\t\treturn (this.state.hasError ? <h1> Oooops. Sorry about that!</h1> : this.props.children);\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { setSearchField, requestUsers } from '../actions';\r\nimport CardList from '../components/Cardlist'; \r\nimport SearchBox from '../components/SearchBox';  \r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\n\r\nimport './App.css';\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    searchField: state.searchUsers.searchField,\r\n    users: state.requestUsers.users,\r\n    isPending: state.requestUsers.isPending,\r\n    error: state.requestUsers.error\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestUsers: () => dispatch(requestUsers())\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.onRequestUsers();\r\n  }\r\n\r\n  render() {\r\n    const { users, searchField, onSearchChange, isPending } = this.props;\r\n    const filteredUsers  = users.filter(user => {\r\n      return user.name.toLowerCase().includes(searchField.toLowerCase());\r\n    })\r\n    return isPending  ?\r\n      <h1 className=\"tc\">Loading</h1> : \r\n      (\r\n      <div className=\"tc\">\r\n       <header className=\"bg-white-20 fixed w-100 ph3 pv3 pv4-ns ph4-m ph5-l\">\r\n        <nav className=\"f6 fw6\">\r\n          <h1 className=\"f1\">Find your colleague!</h1>\r\n          < SearchBox searchChange={onSearchChange}/>\r\n        </nav>\r\n      </header>    \r\n          <ErrorBoundry>\r\n            < CardList users={filteredUsers} />\r\n          </ErrorBoundry>\r\n      </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App)","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_USERS_PENDING,\r\n\tREQUEST_USERS_SUCCESS,\r\n\tREQUEST_USERS_FAILED\r\n} from './constants'\r\n\r\n\r\nconst initialStateSearch = {\r\n\tsearchField: ''\r\n}\r\n\r\nconst initialStateUsers = {\r\n\tisPending: false,\r\n\tusers: [],\r\n\terror: ''\r\n}\r\n\r\nexport const searchUsers = (state = initialStateSearch, action={}) => {\r\n\tswitch(action.type){\r\n\t\tcase CHANGE_SEARCH_FIELD: \r\n\t\t\treturn Object.assign({}, state, {searchField: action.payload});\r\n\t\tdefault: \r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nexport const requestUsers = (state=initialStateUsers, action={}) => {\r\n\tswitch(action.type){\r\n\t\tcase REQUEST_USERS_PENDING:\r\n\t\t\treturn Object.assign({}, state, { isPending: true})\r\n\t\tcase REQUEST_USERS_SUCCESS:\r\n\t\t\treturn Object.assign({}, state, { users: action.payload, isPending: false })\r\n\t\tcase REQUEST_USERS_FAILED:\r\n\t\t\treturn Object.assign({}, state, { error: action.payload, isPending: false})\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { searchUsers, requestUsers } from './reducers';\r\nimport 'tachyons';\r\n\r\n\r\nconst logger = createLogger()\r\nconst rootReducer = combineReducers({searchUsers, requestUsers})\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n    \t<App />\r\n\t</Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}